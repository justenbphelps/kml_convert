{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/justen/Projects/Apps/kml_convert/components/Uploader.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nimport { useState } from 'react';\n\nvar toGeoJSON = require('../static/togeojson');\n\nimport { FormRadio } from 'shards-react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\";\n\nfunction upload(e) {\n  var file = e.target.files[0];\n  var url = window.URL.createObjectURL(file);\n  var xhr = new XMLHttpRequest(url);\n  xhr.open(\"GET\", url, true);\n  xhr.send();\n\n  xhr.onload = function () {\n    var kml = xhr.responseXML;\n    convert(kml, file);\n  };\n}\n\nfunction convert(kml, file) {\n  var geojson = toGeoJSON.kml(kml); // const download = window.URL.createObjectURL(geojson)\n\n  console.log();\n  var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(_JSON$stringify(geojson));\n  var dlAnchorElem = document.getElementById('downloadAnchorElem');\n  dlAnchorElem.setAttribute(\"href\", dataStr);\n  dlAnchorElem.setAttribute(\"download\", file.name.slice(0, -4) + \".json\");\n  dlAnchorElem.click();\n}\n\nfunction select(e) {\n  console.log('gv');\n}\n\nexport default function Uploader() {\n  var _useState = useState('json'),\n      _useState2 = _slicedToArray(_useState, 2),\n      fileType = _useState2[0],\n      setFileType = _useState2[1];\n\n  return React.createElement(\"div\", {\n    className: \"jsx-3366377244\" + \" \" + \"wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"jsx-3366377244\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \".kml converter\"), React.createElement(\"div\", {\n    className: \"jsx-3366377244\" + \" \" + \"radios\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(FormRadio, {\n    inline: true,\n    name: \"filetype\",\n    checked: fileType = 'json',\n    onChange: function onChange() {\n      return setFileType('json');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \".json\"), React.createElement(FormRadio, {\n    inline: true,\n    name: \"filetype\",\n    checked: fileType = 'geojson',\n    onChange: function onChange() {\n      return setFileType('geojson');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \".geojson\")), React.createElement(\"span\", {\n    className: \"jsx-3366377244\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Select your .kml file below to convert and automatically download the converted .json file\"), React.createElement(\"div\", {\n    className: \"jsx-3366377244\" + \" \" + \"upload_form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    id: \"downloadAnchorElem\",\n    className: \"jsx-3366377244\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"file\",\n    id: \"file_input\",\n    name: \"file_input\",\n    onChange: upload,\n    accept: \".kml\",\n    className: \"jsx-3366377244\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"file_input\",\n    className: \"jsx-3366377244\" + \" \" + \"upload_label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Select File\")), React.createElement(_JSXStyle, {\n    id: \"3366377244\",\n    __self: this\n  }, \".wrapper.jsx-3366377244{width:350px;height:200px;padding:10px;text-align:center;background-color:#fff;border-radius:4px;box-shadow:2px 6px 10px rgba(0,0,0,0.1);display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-transition:all 0.4s;transition:all 0.4s;}.wrapper.jsx-3366377244:hover{box-shadow:4px 8px 12px rgba(0,0,0,0.2);-webkit-transform:translateY(-10px);-ms-transform:translateY(-10px);transform:translateY(-10px);}h1.jsx-3366377244{font-weight:400;font-size:18px;margin-top:10px;}span.jsx-3366377244{font-size:12px;}input[type=\\\"file\\\"].jsx-3366377244{width:0.1px;height:0.1px;opacity:0;overflow:hidden;position:absolute;z-index:-1;}.upload_label.jsx-3366377244{font-weight:700;width:150px;height:35px;margin-bottom:10px;border-radius:4px;text-align:center;line-height:150%;font-size:1.15em;color:white;background-color:#4264fb;display:grid;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;cursor:pointer;}a.jsx-3366377244{display:none;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qdXN0ZW4vUHJvamVjdHMvQXBwcy9rbWxfY29udmVydC9jb21wb25lbnRzL1VwbG9hZGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFFa0IsQUFHdUIsQUFjNEIsQUFJeEIsQUFLRCxBQUdILEFBUUksQUFlSCxZQWhEQSxBQTBCQSxDQXVCZixFQTFCQSxDQUxpQixBQWdCSCxTQWpDQyxBQTBCSCxHQVFFLEdBaEJJLElBU0EsR0ExQkUsRUFZVSxBQXNCVCxPQWhCckIsSUFTb0IsS0ExQkksR0FrQ0osVUFQUCxRQVFPLENBbENBLEVBMkJwQixlQVFtQixDQWxDdUIsZ0JBbUN2QixpQkFDTCxPQW5DQyxBQVNmLEtBMkIyQix5QkFDWixhQUNNLCtCQXJDRyw4REFzQ1AsZUFDakIsQ0F0Q2dDLG1IQUNYLDZGQUNDLGdEQUN0QiIsImZpbGUiOiIvVXNlcnMvanVzdGVuL1Byb2plY3RzL0FwcHMva21sX2NvbnZlcnQvY29tcG9uZW50cy9VcGxvYWRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7dXNlU3RhdGV9IGZyb20gJ3JlYWN0J1xuXG5jb25zdCB0b0dlb0pTT04gPSByZXF1aXJlKCcuLi9zdGF0aWMvdG9nZW9qc29uJylcblxuaW1wb3J0IHsgRm9ybVJhZGlvIH0gZnJvbSAnc2hhcmRzLXJlYWN0JztcblxuaW1wb3J0IFwiYm9vdHN0cmFwL2Rpc3QvY3NzL2Jvb3RzdHJhcC5taW4uY3NzXCI7XG5pbXBvcnQgXCJzaGFyZHMtdWkvZGlzdC9jc3Mvc2hhcmRzLm1pbi5jc3NcIjtcblxuXG5mdW5jdGlvbiB1cGxvYWQoZSkge1xuICBjb25zdCBmaWxlID0gZS50YXJnZXQuZmlsZXNbMF1cbiAgbGV0IHVybCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpXG4gIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCh1cmwpXG4gIHhoci5vcGVuKFwiR0VUXCIsIHVybCwgdHJ1ZSlcbiAgeGhyLnNlbmQoKVxuICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc3Qga21sID0geGhyLnJlc3BvbnNlWE1MXG4gICAgY29udmVydChrbWwsIGZpbGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gY29udmVydChrbWwsIGZpbGUpe1xuICBjb25zdCBnZW9qc29uID0gdG9HZW9KU09OLmttbChrbWwpXG4gIC8vIGNvbnN0IGRvd25sb2FkID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoZ2VvanNvbilcbiAgY29uc29sZS5sb2coKVxuXG4gIHZhciBkYXRhU3RyID0gXCJkYXRhOnRleHQvanNvbjtjaGFyc2V0PXV0Zi04LFwiICsgZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGdlb2pzb24pKTtcbiAgdmFyIGRsQW5jaG9yRWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkb3dubG9hZEFuY2hvckVsZW0nKTtcbiAgZGxBbmNob3JFbGVtLnNldEF0dHJpYnV0ZShcImhyZWZcIiwgICAgIGRhdGFTdHIgICAgICk7XG4gIGRsQW5jaG9yRWxlbS5zZXRBdHRyaWJ1dGUoXCJkb3dubG9hZFwiLCBmaWxlLm5hbWUuc2xpY2UoMCwgLTQpICsgXCIuanNvblwiKTtcbiAgZGxBbmNob3JFbGVtLmNsaWNrKCk7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdChlKXtcbiAgY29uc29sZS5sb2coJ2d2Jylcbn1cblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBVcGxvYWRlcigpIHtcbiAgbGV0IFtmaWxlVHlwZSwgc2V0RmlsZVR5cGVdID0gdXNlU3RhdGUoJ2pzb24nKTtcblxuICByZXR1cm4oXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ3cmFwcGVyXCI+XG4gICAgICA8aDE+LmttbCBjb252ZXJ0ZXI8L2gxPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJyYWRpb3NcIj5cbiAgICAgIDxGb3JtUmFkaW9cbiAgICAgICAgICAgIGlubGluZVxuICAgICAgICAgICAgbmFtZT1cImZpbGV0eXBlXCJcbiAgICAgICAgICAgIGNoZWNrZWQ9e2ZpbGVUeXBlID0gJ2pzb24nfVxuICAgICAgICAgICAgb25DaGFuZ2U9eygpID0+IHNldEZpbGVUeXBlKCdqc29uJyl9XG4gICAgICAgICAgPlxuICAgICAgICAgIC5qc29uXG4gICAgICAgICAgPC9Gb3JtUmFkaW8+XG4gICAgICAgICAgPEZvcm1SYWRpb1xuICAgICAgICAgICAgaW5saW5lXG4gICAgICAgICAgICBuYW1lPVwiZmlsZXR5cGVcIlxuICAgICAgICAgICAgY2hlY2tlZD17ZmlsZVR5cGUgPSAnZ2VvanNvbid9XG4gICAgICAgICAgICBvbkNoYW5nZT17KCkgPT4gc2V0RmlsZVR5cGUoJ2dlb2pzb24nKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgLmdlb2pzb25cbiAgICAgICAgICA8L0Zvcm1SYWRpbz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8c3Bhbj5TZWxlY3QgeW91ciAua21sIGZpbGUgYmVsb3cgdG8gY29udmVydCBhbmQgYXV0b21hdGljYWxseSBkb3dubG9hZCB0aGUgY29udmVydGVkIC5qc29uIGZpbGU8L3NwYW4+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInVwbG9hZF9mb3JtXCI+XG4gICAgICAgIDxhIGlkPVwiZG93bmxvYWRBbmNob3JFbGVtXCIgPjwvYT5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgaWQ9XCJmaWxlX2lucHV0XCIgbmFtZT1cImZpbGVfaW5wdXRcIiBvbkNoYW5nZT17dXBsb2FkfSBhY2NlcHQ9XCIua21sXCI+PC9pbnB1dD5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJmaWxlX2lucHV0XCIgY2xhc3NOYW1lPVwidXBsb2FkX2xhYmVsXCI+U2VsZWN0IEZpbGU8L2xhYmVsPlxuICAgICAgPC9kaXY+XG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIC53cmFwcGVyIHtcbiAgICAgICAgICB3aWR0aDogMzUwcHg7XG4gICAgICAgICAgaGVpZ2h0OiAyMDBweDtcbiAgICAgICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICAgICBib3gtc2hhZG93OiAycHggNnB4IDEwcHggcmdiYSgwLDAsMCwwLjEpO1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC40cztcbiAgICAgICAgfVxuICAgICAgICAud3JhcHBlcjpob3ZlcntcbiAgICAgICAgICBib3gtc2hhZG93OiA0cHggOHB4IDEycHggcmdiYSgwLDAsMCwwLjIpO1xuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTBweCk7XG4gICAgICAgIH1cbiAgICAgICAgaDEge1xuICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgICAgICAgZm9udC1zaXplOiAxOHB4O1xuICAgICAgICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgICAgIH1cbiAgICAgICAgc3BhbiB7XG4gICAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgICB9XG4gICAgICAgIGlucHV0W3R5cGU9XCJmaWxlXCJdIHtcbiAgICAgICAgICB3aWR0aDogMC4xcHg7XG4gICAgICAgICAgaGVpZ2h0OiAwLjFweDtcbiAgICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgIHotaW5kZXg6IC0xO1xuICAgICAgICB9XG4gICAgICAgIC51cGxvYWRfbGFiZWwge1xuICAgICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgICAgICAgd2lkdGg6IDE1MHB4O1xuICAgICAgICAgIGhlaWdodDogMzVweDtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgbGluZS1oZWlnaHQ6IDE1MCU7XG4gICAgICAgICAgZm9udC1zaXplOiAxLjE1ZW07XG4gICAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM0MjY0ZmI7XG4gICAgICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgfVxuICAgICAgICBhIHtcbiAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgPC9kaXY+XG4gIClcbn0iXX0= */\\n/*@ sourceURL=/Users/justen/Projects/Apps/kml_convert/components/Uploader.js */\"));\n}","map":{"version":3,"sources":["/Users/justen/Projects/Apps/kml_convert/components/Uploader.js"],"names":["useState","toGeoJSON","require","FormRadio","upload","e","file","target","files","url","window","URL","createObjectURL","xhr","XMLHttpRequest","open","send","onload","kml","responseXML","convert","geojson","console","log","dataStr","encodeURIComponent","dlAnchorElem","document","getElementById","setAttribute","name","slice","click","select","Uploader","fileType","setFileType"],"mappings":"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","sourcesContent":["import {useState} from 'react'\n\nconst toGeoJSON = require('../static/togeojson')\n\nimport { FormRadio } from 'shards-react';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\";\n\n\nfunction upload(e) {\n  const file = e.target.files[0]\n  let url = window.URL.createObjectURL(file)\n  const xhr = new XMLHttpRequest(url)\n  xhr.open(\"GET\", url, true)\n  xhr.send()\n  xhr.onload = function() {\n    const kml = xhr.responseXML\n    convert(kml, file)\n  }\n}\n\nfunction convert(kml, file){\n  const geojson = toGeoJSON.kml(kml)\n  // const download = window.URL.createObjectURL(geojson)\n  console.log()\n\n  var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(geojson));\n  var dlAnchorElem = document.getElementById('downloadAnchorElem');\n  dlAnchorElem.setAttribute(\"href\",     dataStr     );\n  dlAnchorElem.setAttribute(\"download\", file.name.slice(0, -4) + \".json\");\n  dlAnchorElem.click();\n}\n\nfunction select(e){\n  console.log('gv')\n}\n\n\nexport default function Uploader() {\n  let [fileType, setFileType] = useState('json');\n\n  return(\n    <div className=\"wrapper\">\n      <h1>.kml converter</h1>\n      <div className=\"radios\">\n      <FormRadio\n            inline\n            name=\"filetype\"\n            checked={fileType = 'json'}\n            onChange={() => setFileType('json')}\n          >\n          .json\n          </FormRadio>\n          <FormRadio\n            inline\n            name=\"filetype\"\n            checked={fileType = 'geojson'}\n            onChange={() => setFileType('geojson')}\n          >\n          .geojson\n          </FormRadio>\n        </div>\n      <span>Select your .kml file below to convert and automatically download the converted .json file</span>\n      <div className=\"upload_form\">\n        <a id=\"downloadAnchorElem\" ></a>\n        <input type=\"file\" id=\"file_input\" name=\"file_input\" onChange={upload} accept=\".kml\"></input>\n        <label htmlFor=\"file_input\" className=\"upload_label\">Select File</label>\n      </div>\n      <style jsx>{`\n        .wrapper {\n          width: 350px;\n          height: 200px;\n          padding: 10px;\n          text-align: center;\n          background-color: #fff;\n          border-radius: 4px;\n          box-shadow: 2px 6px 10px rgba(0,0,0,0.1);\n          display: flex;\n          flex-direction: column;\n          justify-content: space-between;\n          align-items: center;\n          transition: all 0.4s;\n        }\n        .wrapper:hover{\n          box-shadow: 4px 8px 12px rgba(0,0,0,0.2);\n          transform: translateY(-10px);\n        }\n        h1 {\n          font-weight: 400;\n          font-size: 18px;\n          margin-top: 10px;\n        }\n        span {\n          font-size: 12px;\n        }\n        input[type=\"file\"] {\n          width: 0.1px;\n          height: 0.1px;\n          opacity: 0;\n          overflow: hidden;\n          position: absolute;\n          z-index: -1;\n        }\n        .upload_label {\n          font-weight: 700;\n          width: 150px;\n          height: 35px;\n          margin-bottom: 10px;\n          border-radius: 4px;\n          text-align: center;\n          line-height: 150%;\n          font-size: 1.15em;\n          color: white;\n          background-color: #4264fb;\n          display: grid;\n          align-items: center;\n          cursor: pointer;\n        }\n        a {\n          display: none;\n        }\n      `}</style>\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}