{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/justen/Projects/Apps/kml_convert/components/Uploader.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nimport { useState } from 'react';\nimport { FormRadio } from 'shards-react'; // Styles for Shards\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\";\n\nvar toGeoJSON = require('../static/togeojson');\n\nexport default function Uploader() {\n  var _useState = useState('json'),\n      _useState2 = _slicedToArray(_useState, 2),\n      fileType = _useState2[0],\n      setFileType = _useState2[1];\n\n  function upload(e) {\n    var file = e.target.files[0];\n    var url = window.URL.createObjectURL(file);\n    var xhr = new XMLHttpRequest(url);\n    xhr.open(\"GET\", url, true);\n    xhr.send();\n\n    xhr.onload = function () {\n      var kml = xhr.responseXML;\n      convert(kml, file);\n    };\n  }\n\n  function convert(kml, file) {\n    var geojson = toGeoJSON.kml(kml);\n    var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(_JSON$stringify(geojson));\n    var dlAnchorElem = document.getElementById('downloadAnchorElem');\n    dlAnchorElem.setAttribute(\"href\", dataStr);\n    var extension = fileType;\n    dlAnchorElem.setAttribute(\"download\", \"\".concat(file.name.slice(0, -4), \".\").concat(extension));\n    dlAnchorElem.click();\n  }\n\n  return React.createElement(\"div\", {\n    className: \"jsx-3366377244\" + \" \" + \"wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"jsx-3366377244\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \".kml converter\"), React.createElement(\"div\", {\n    className: \"jsx-3366377244\" + \" \" + \"radios\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(FormRadio, {\n    inline: true,\n    name: \"filetype\",\n    checked: fileType === 'json',\n    onChange: function onChange() {\n      return setFileType('json');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \".json\"), React.createElement(FormRadio, {\n    inline: true,\n    name: \"filetype\",\n    checked: fileType === 'geojson',\n    onChange: function onChange() {\n      return setFileType('geojson');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \".geojson\")), React.createElement(\"span\", {\n    className: \"jsx-3366377244\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Select your .kml file below to convert and automatically download the converted .json file\"), React.createElement(\"div\", {\n    className: \"jsx-3366377244\" + \" \" + \"upload_form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    id: \"downloadAnchorElem\",\n    className: \"jsx-3366377244\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"file\",\n    id: \"file_input\",\n    name: \"file_input\",\n    onChange: upload,\n    accept: \".kml\",\n    className: \"jsx-3366377244\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"file_input\",\n    className: \"jsx-3366377244\" + \" \" + \"upload_label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Select File\")), React.createElement(_JSXStyle, {\n    id: \"3366377244\",\n    __self: this\n  }, \".wrapper.jsx-3366377244{width:350px;height:200px;padding:10px;text-align:center;background-color:#fff;border-radius:4px;box-shadow:2px 6px 10px rgba(0,0,0,0.1);display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-transition:all 0.4s;transition:all 0.4s;}.wrapper.jsx-3366377244:hover{box-shadow:4px 8px 12px rgba(0,0,0,0.2);-webkit-transform:translateY(-10px);-ms-transform:translateY(-10px);transform:translateY(-10px);}h1.jsx-3366377244{font-weight:400;font-size:18px;margin-top:10px;}span.jsx-3366377244{font-size:12px;}input[type=\\\"file\\\"].jsx-3366377244{width:0.1px;height:0.1px;opacity:0;overflow:hidden;position:absolute;z-index:-1;}.upload_label.jsx-3366377244{font-weight:700;width:150px;height:35px;margin-bottom:10px;border-radius:4px;text-align:center;line-height:150%;font-size:1.15em;color:white;background-color:#4264fb;display:grid;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;cursor:pointer;}a.jsx-3366377244{display:none;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qdXN0ZW4vUHJvamVjdHMvQXBwcy9rbWxfY29udmVydC9jb21wb25lbnRzL1VwbG9hZGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdFa0IsQUFHdUIsQUFjNEIsQUFJeEIsQUFLRCxBQUdILEFBUUksQUFlSCxZQWhEQSxBQTBCQSxDQXVCZixFQTFCQSxDQUxpQixBQWdCSCxTQWpDQyxBQTBCSCxHQVFFLEdBaEJJLElBU0EsR0ExQkUsRUFZVSxBQXNCVCxPQWhCckIsSUFTb0IsS0ExQkksR0FrQ0osVUFQUCxRQVFPLENBbENBLEVBMkJwQixlQVFtQixDQWxDdUIsZ0JBbUN2QixpQkFDTCxPQW5DQyxBQVNmLEtBMkIyQix5QkFDWixhQUNNLCtCQXJDRyw4REFzQ1AsZUFDakIsQ0F0Q2dDLG1IQUNYLDZGQUNDLGdEQUN0QiIsImZpbGUiOiIvVXNlcnMvanVzdGVuL1Byb2plY3RzL0FwcHMva21sX2NvbnZlcnQvY29tcG9uZW50cy9VcGxvYWRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7dXNlU3RhdGV9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgRm9ybVJhZGlvIH0gZnJvbSAnc2hhcmRzLXJlYWN0JztcblxuLy8gU3R5bGVzIGZvciBTaGFyZHNcbmltcG9ydCBcImJvb3RzdHJhcC9kaXN0L2Nzcy9ib290c3RyYXAubWluLmNzc1wiO1xuaW1wb3J0IFwic2hhcmRzLXVpL2Rpc3QvY3NzL3NoYXJkcy5taW4uY3NzXCI7XG5cbmNvbnN0IHRvR2VvSlNPTiA9IHJlcXVpcmUoJy4uL3N0YXRpYy90b2dlb2pzb24nKVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBVcGxvYWRlcigpIHtcblxuICBsZXQgW2ZpbGVUeXBlLCBzZXRGaWxlVHlwZV0gPSB1c2VTdGF0ZSgnanNvbicpO1xuXG4gIGZ1bmN0aW9uIHVwbG9hZChlKSB7XG4gICAgY29uc3QgZmlsZSA9IGUudGFyZ2V0LmZpbGVzWzBdXG4gICAgbGV0IHVybCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpXG4gICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KHVybClcbiAgICB4aHIub3BlbihcIkdFVFwiLCB1cmwsIHRydWUpXG4gICAgeGhyLnNlbmQoKVxuICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnN0IGttbCA9IHhoci5yZXNwb25zZVhNTFxuICAgICAgY29udmVydChrbWwsIGZpbGUpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY29udmVydChrbWwsIGZpbGUpe1xuICAgIGNvbnN0IGdlb2pzb24gPSB0b0dlb0pTT04ua21sKGttbClcbiAgXG4gICAgdmFyIGRhdGFTdHIgPSBcImRhdGE6dGV4dC9qc29uO2NoYXJzZXQ9dXRmLTgsXCIgKyBlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoZ2VvanNvbikpO1xuICAgIHZhciBkbEFuY2hvckVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZG93bmxvYWRBbmNob3JFbGVtJyk7XG4gICAgZGxBbmNob3JFbGVtLnNldEF0dHJpYnV0ZShcImhyZWZcIiwgICAgIGRhdGFTdHIgICAgICk7XG4gICAgbGV0IGV4dGVuc2lvbiA9IGZpbGVUeXBlXG4gICAgZGxBbmNob3JFbGVtLnNldEF0dHJpYnV0ZShcImRvd25sb2FkXCIsIGAke2ZpbGUubmFtZS5zbGljZSgwLCAtNCl9LiR7ZXh0ZW5zaW9ufWApO1xuICAgIGRsQW5jaG9yRWxlbS5jbGljaygpO1xuICB9XG5cbiAgcmV0dXJuKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwid3JhcHBlclwiPlxuICAgICAgPGgxPi5rbWwgY29udmVydGVyPC9oMT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmFkaW9zXCI+XG4gICAgICA8Rm9ybVJhZGlvXG4gICAgICAgICAgICBpbmxpbmVcbiAgICAgICAgICAgIG5hbWU9XCJmaWxldHlwZVwiXG4gICAgICAgICAgICBjaGVja2VkPXtmaWxlVHlwZSA9PT0gJ2pzb24nfVxuICAgICAgICAgICAgb25DaGFuZ2U9eygpID0+IHNldEZpbGVUeXBlKCdqc29uJyl9XG4gICAgICAgICAgPlxuICAgICAgICAgIC5qc29uXG4gICAgICAgICAgPC9Gb3JtUmFkaW8+XG4gICAgICAgICAgPEZvcm1SYWRpb1xuICAgICAgICAgICAgaW5saW5lXG4gICAgICAgICAgICBuYW1lPVwiZmlsZXR5cGVcIlxuICAgICAgICAgICAgY2hlY2tlZD17ZmlsZVR5cGUgPT09ICdnZW9qc29uJ31cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoKSA9PiBzZXRGaWxlVHlwZSgnZ2VvanNvbicpfVxuICAgICAgICAgID5cbiAgICAgICAgICAuZ2VvanNvblxuICAgICAgICAgIDwvRm9ybVJhZGlvPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgPHNwYW4+U2VsZWN0IHlvdXIgLmttbCBmaWxlIGJlbG93IHRvIGNvbnZlcnQgYW5kIGF1dG9tYXRpY2FsbHkgZG93bmxvYWQgdGhlIGNvbnZlcnRlZCAuanNvbiBmaWxlPC9zcGFuPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cGxvYWRfZm9ybVwiPlxuICAgICAgICA8YSBpZD1cImRvd25sb2FkQW5jaG9yRWxlbVwiID48L2E+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwiZmlsZVwiIGlkPVwiZmlsZV9pbnB1dFwiIG5hbWU9XCJmaWxlX2lucHV0XCIgb25DaGFuZ2U9e3VwbG9hZH0gYWNjZXB0PVwiLmttbFwiPjwvaW5wdXQ+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPVwiZmlsZV9pbnB1dFwiIGNsYXNzTmFtZT1cInVwbG9hZF9sYWJlbFwiPlNlbGVjdCBGaWxlPC9sYWJlbD5cbiAgICAgIDwvZGl2PlxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAud3JhcHBlciB7XG4gICAgICAgICAgd2lkdGg6IDM1MHB4O1xuICAgICAgICAgIGhlaWdodDogMjAwcHg7XG4gICAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgICAgYm94LXNoYWRvdzogMnB4IDZweCAxMHB4IHJnYmEoMCwwLDAsMC4xKTtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuNHM7XG4gICAgICAgIH1cbiAgICAgICAgLndyYXBwZXI6aG92ZXJ7XG4gICAgICAgICAgYm94LXNoYWRvdzogNHB4IDhweCAxMnB4IHJnYmEoMCwwLDAsMC4yKTtcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEwcHgpO1xuICAgICAgICB9XG4gICAgICAgIGgxIHtcbiAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xuICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgICB9XG4gICAgICAgIHNwYW4ge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dFt0eXBlPVwiZmlsZVwiXSB7XG4gICAgICAgICAgd2lkdGg6IDAuMXB4O1xuICAgICAgICAgIGhlaWdodDogMC4xcHg7XG4gICAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICB6LWluZGV4OiAtMTtcbiAgICAgICAgfVxuICAgICAgICAudXBsb2FkX2xhYmVsIHtcbiAgICAgICAgICBmb250LXdlaWdodDogNzAwO1xuICAgICAgICAgIHdpZHRoOiAxNTBweDtcbiAgICAgICAgICBoZWlnaHQ6IDM1cHg7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxNTAlO1xuICAgICAgICAgIGZvbnQtc2l6ZTogMS4xNWVtO1xuICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDI2NGZiO1xuICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIH1cbiAgICAgICAgYSB7XG4gICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgfVxuICAgICAgYH08L3N0eWxlPlxuICAgIDwvZGl2PlxuICApXG59Il19 */\\n/*@ sourceURL=/Users/justen/Projects/Apps/kml_convert/components/Uploader.js */\"));\n}","map":{"version":3,"sources":["/Users/justen/Projects/Apps/kml_convert/components/Uploader.js"],"names":["useState","FormRadio","toGeoJSON","require","Uploader","fileType","setFileType","upload","e","file","target","files","url","window","URL","createObjectURL","xhr","XMLHttpRequest","open","send","onload","kml","responseXML","convert","geojson","dataStr","encodeURIComponent","dlAnchorElem","document","getElementById","setAttribute","extension","name","slice","click"],"mappings":"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","sourcesContent":["import {useState} from 'react'\nimport { FormRadio } from 'shards-react';\n\n// Styles for Shards\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\";\n\nconst toGeoJSON = require('../static/togeojson')\n\nexport default function Uploader() {\n\n  let [fileType, setFileType] = useState('json');\n\n  function upload(e) {\n    const file = e.target.files[0]\n    let url = window.URL.createObjectURL(file)\n    const xhr = new XMLHttpRequest(url)\n    xhr.open(\"GET\", url, true)\n    xhr.send()\n    xhr.onload = function() {\n      const kml = xhr.responseXML\n      convert(kml, file)\n    }\n  }\n\n  function convert(kml, file){\n    const geojson = toGeoJSON.kml(kml)\n  \n    var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(geojson));\n    var dlAnchorElem = document.getElementById('downloadAnchorElem');\n    dlAnchorElem.setAttribute(\"href\",     dataStr     );\n    let extension = fileType\n    dlAnchorElem.setAttribute(\"download\", `${file.name.slice(0, -4)}.${extension}`);\n    dlAnchorElem.click();\n  }\n\n  return(\n    <div className=\"wrapper\">\n      <h1>.kml converter</h1>\n      <div className=\"radios\">\n      <FormRadio\n            inline\n            name=\"filetype\"\n            checked={fileType === 'json'}\n            onChange={() => setFileType('json')}\n          >\n          .json\n          </FormRadio>\n          <FormRadio\n            inline\n            name=\"filetype\"\n            checked={fileType === 'geojson'}\n            onChange={() => setFileType('geojson')}\n          >\n          .geojson\n          </FormRadio>\n        </div>\n\n      <span>Select your .kml file below to convert and automatically download the converted .json file</span>\n      <div className=\"upload_form\">\n        <a id=\"downloadAnchorElem\" ></a>\n        <input type=\"file\" id=\"file_input\" name=\"file_input\" onChange={upload} accept=\".kml\"></input>\n        <label htmlFor=\"file_input\" className=\"upload_label\">Select File</label>\n      </div>\n      <style jsx>{`\n        .wrapper {\n          width: 350px;\n          height: 200px;\n          padding: 10px;\n          text-align: center;\n          background-color: #fff;\n          border-radius: 4px;\n          box-shadow: 2px 6px 10px rgba(0,0,0,0.1);\n          display: flex;\n          flex-direction: column;\n          justify-content: space-between;\n          align-items: center;\n          transition: all 0.4s;\n        }\n        .wrapper:hover{\n          box-shadow: 4px 8px 12px rgba(0,0,0,0.2);\n          transform: translateY(-10px);\n        }\n        h1 {\n          font-weight: 400;\n          font-size: 18px;\n          margin-top: 10px;\n        }\n        span {\n          font-size: 12px;\n        }\n        input[type=\"file\"] {\n          width: 0.1px;\n          height: 0.1px;\n          opacity: 0;\n          overflow: hidden;\n          position: absolute;\n          z-index: -1;\n        }\n        .upload_label {\n          font-weight: 700;\n          width: 150px;\n          height: 35px;\n          margin-bottom: 10px;\n          border-radius: 4px;\n          text-align: center;\n          line-height: 150%;\n          font-size: 1.15em;\n          color: white;\n          background-color: #4264fb;\n          display: grid;\n          align-items: center;\n          cursor: pointer;\n        }\n        a {\n          display: none;\n        }\n      `}</style>\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}