{"ast":null,"code":"var _jsxFileName = \"/Users/justen/Projects/Apps/kml_convert/components/Uploader.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\n\nvar toGeoJSON = require('../static/togeojson');\n\nfunction upload(e) {\n  var file = e.target.files[0];\n  var url = window.URL.createObjectURL(file);\n  var xhr = new XMLHttpRequest(url);\n  xhr.open(\"GET\", url, true);\n  xhr.send();\n\n  xhr.onload = function () {\n    console.log(xhr.responseXML);\n    var kml = xhr.responseXML;\n    convert(kml);\n  };\n}\n\nfunction convert(kml) {\n  var geojson = toGeoJSON.kml(kml);\n  var download = window.URL.createObjectURL(geojson);\n  console.log(geojson);\n}\n\nexport default function Uploader() {\n  return React.createElement(\"div\", {\n    className: \"jsx-302460385\" + \" \" + \"wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"jsx-302460385\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \".kml converter\"), React.createElement(\"div\", {\n    className: \"jsx-302460385\" + \" \" + \"upload_form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"file\",\n    id: \"file_input\",\n    name: \"file_input\",\n    onChange: upload,\n    accept: \".kml\",\n    className: \"jsx-302460385\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"file_input\",\n    className: \"jsx-302460385\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Upload\")), React.createElement(_JSXStyle, {\n    id: \"302460385\",\n    __self: this\n  }, \".wrapper.jsx-302460385{width:350px;height:200px;background-color:#fff;border-radius:4px;box-shadow:2px 6px 10px rgba(0,0,0,0.1);display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}h1.jsx-302460385{font-weight:400;font-size:24px;margin-top:10px;}input.jsx-302460385{width:0.1px;height:0.1px;opacity:0;overflow:hidden;position:absolute;z-index:-1;}label.jsx-302460385{font-weight:700;width:150px;height:35px;margin-bottom:10px;border-radius:4px;text-align:center;line-height:150%;font-size:1.15em;color:white;background-color:#47a66a;display:grid;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;cursor:pointer;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qdXN0ZW4vUHJvamVjdHMvQXBwcy9rbWxfY29udmVydC9jb21wb25lbnRzL1VwbG9hZGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTZCa0IsQUFHdUIsQUFXSSxBQUtKLEFBUUksWUF2QkgsQUFnQkEsSUFMRSxBQWFILFNBdkJVLEFBZ0JaLEdBUUUsR0FiSSxJQU1BLEtBUUcsT0F4QkQsQUFXcEIsSUFNb0IsUUFRQSxNQXhCc0IsSUFpQjdCLFFBUU8sR0FQcEIsZUFRbUIsVUF6QkosT0EwQkksaUJBQ0wsWUFDWSx5QkFDWCxhQTVCUyxBQTZCSCw4RUE1QlcsZUE2QmYsZUFDakIscUZBN0JxQiw2RkFDckIiLCJmaWxlIjoiL1VzZXJzL2p1c3Rlbi9Qcm9qZWN0cy9BcHBzL2ttbF9jb252ZXJ0L2NvbXBvbmVudHMvVXBsb2FkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0b0dlb0pTT04gPSByZXF1aXJlKCcuLi9zdGF0aWMvdG9nZW9qc29uJylcblxuZnVuY3Rpb24gdXBsb2FkKGUpIHtcbiAgY29uc3QgZmlsZSA9IGUudGFyZ2V0LmZpbGVzWzBdXG4gIGxldCB1cmwgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKVxuICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QodXJsKVxuICB4aHIub3BlbihcIkdFVFwiLCB1cmwsIHRydWUpXG4gIHhoci5zZW5kKClcbiAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnNvbGUubG9nKHhoci5yZXNwb25zZVhNTClcbiAgICBjb25zdCBrbWwgPSB4aHIucmVzcG9uc2VYTUxcbiAgICBjb252ZXJ0KGttbClcbiAgfVxufVxuXG5mdW5jdGlvbiBjb252ZXJ0KGttbCl7XG4gIGNvbnN0IGdlb2pzb24gPSB0b0dlb0pTT04ua21sKGttbClcbiAgY29uc3QgZG93bmxvYWQgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChnZW9qc29uKVxuICBjb25zb2xlLmxvZyhnZW9qc29uKVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBVcGxvYWRlcigpIHtcbiAgcmV0dXJuKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwid3JhcHBlclwiPlxuICAgICAgPGgxPi5rbWwgY29udmVydGVyPC9oMT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBsb2FkX2Zvcm1cIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgaWQ9XCJmaWxlX2lucHV0XCIgbmFtZT1cImZpbGVfaW5wdXRcIiBvbkNoYW5nZT17dXBsb2FkfSBhY2NlcHQ9XCIua21sXCI+PC9pbnB1dD5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJmaWxlX2lucHV0XCI+VXBsb2FkPC9sYWJlbD5cbiAgICAgIDwvZGl2PlxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAud3JhcHBlciB7XG4gICAgICAgICAgd2lkdGg6IDM1MHB4O1xuICAgICAgICAgIGhlaWdodDogMjAwcHg7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgICAgYm94LXNoYWRvdzogMnB4IDZweCAxMHB4IHJnYmEoMCwwLDAsMC4xKTtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaDEge1xuICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgICAgICAgZm9udC1zaXplOiAyNHB4O1xuICAgICAgICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXQge1xuICAgICAgICAgIHdpZHRoOiAwLjFweDtcbiAgICAgICAgICBoZWlnaHQ6IDAuMXB4O1xuICAgICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgei1pbmRleDogLTE7XG4gICAgICAgIH1cbiAgICAgICAgbGFiZWwge1xuICAgICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgICAgICAgd2lkdGg6IDE1MHB4O1xuICAgICAgICAgIGhlaWdodDogMzVweDtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgbGluZS1oZWlnaHQ6IDE1MCU7XG4gICAgICAgICAgZm9udC1zaXplOiAxLjE1ZW07XG4gICAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IzQ3YTY2YTtcbiAgICAgICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgPC9kaXY+XG4gIClcbn0iXX0= */\\n/*@ sourceURL=/Users/justen/Projects/Apps/kml_convert/components/Uploader.js */\"));\n}","map":{"version":3,"sources":["/Users/justen/Projects/Apps/kml_convert/components/Uploader.js"],"names":["toGeoJSON","require","upload","e","file","target","files","url","window","URL","createObjectURL","xhr","XMLHttpRequest","open","send","onload","console","log","responseXML","kml","convert","geojson","download","Uploader"],"mappings":";;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAzB;;AAEA,SAASC,MAAT,CAAgBC,CAAhB,EAAmB;AACjB,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,CAAb;AACA,MAAIC,GAAG,GAAGC,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2BN,IAA3B,CAAV;AACA,MAAMO,GAAG,GAAG,IAAIC,cAAJ,CAAmBL,GAAnB,CAAZ;AACAI,EAAAA,GAAG,CAACE,IAAJ,CAAS,KAAT,EAAgBN,GAAhB,EAAqB,IAArB;AACAI,EAAAA,GAAG,CAACG,IAAJ;;AACAH,EAAAA,GAAG,CAACI,MAAJ,GAAa,YAAW;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAYN,GAAG,CAACO,WAAhB;AACA,QAAMC,GAAG,GAAGR,GAAG,CAACO,WAAhB;AACAE,IAAAA,OAAO,CAACD,GAAD,CAAP;AACD,GAJD;AAKD;;AAED,SAASC,OAAT,CAAiBD,GAAjB,EAAqB;AACnB,MAAME,OAAO,GAAGrB,SAAS,CAACmB,GAAV,CAAcA,GAAd,CAAhB;AACA,MAAMG,QAAQ,GAAGd,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2BW,OAA3B,CAAjB;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAYI,OAAZ;AACD;;AAED,eAAe,SAASE,QAAT,GAAoB;AACjC,SACE;AAAA,uCAAe,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE;AAAA,uCAAe,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,EAAE,EAAC,YAAtB;AAAmC,IAAA,IAAI,EAAC,YAAxC;AAAqD,IAAA,QAAQ,EAAErB,MAA/D;AAAuE,IAAA,MAAM,EAAC,MAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAO,IAAA,OAAO,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CAFF;AAAA;AAAA;AAAA,8qIADF;AAkDD","sourcesContent":["const toGeoJSON = require('../static/togeojson')\n\nfunction upload(e) {\n  const file = e.target.files[0]\n  let url = window.URL.createObjectURL(file)\n  const xhr = new XMLHttpRequest(url)\n  xhr.open(\"GET\", url, true)\n  xhr.send()\n  xhr.onload = function() {\n    console.log(xhr.responseXML)\n    const kml = xhr.responseXML\n    convert(kml)\n  }\n}\n\nfunction convert(kml){\n  const geojson = toGeoJSON.kml(kml)\n  const download = window.URL.createObjectURL(geojson)\n  console.log(geojson)\n}\n\nexport default function Uploader() {\n  return(\n    <div className=\"wrapper\">\n      <h1>.kml converter</h1>\n      <div className=\"upload_form\">\n        <input type=\"file\" id=\"file_input\" name=\"file_input\" onChange={upload} accept=\".kml\"></input>\n        <label htmlFor=\"file_input\">Upload</label>\n      </div>\n      <style jsx>{`\n        .wrapper {\n          width: 350px;\n          height: 200px;\n          background-color: #fff;\n          border-radius: 4px;\n          box-shadow: 2px 6px 10px rgba(0,0,0,0.1);\n          display: flex;\n          flex-direction: column;\n          justify-content: space-between;\n          align-items: center;\n        }\n        h1 {\n          font-weight: 400;\n          font-size: 24px;\n          margin-top: 10px;\n        }\n        input {\n          width: 0.1px;\n          height: 0.1px;\n          opacity: 0;\n          overflow: hidden;\n          position: absolute;\n          z-index: -1;\n        }\n        label {\n          font-weight: 700;\n          width: 150px;\n          height: 35px;\n          margin-bottom: 10px;\n          border-radius: 4px;\n          text-align: center;\n          line-height: 150%;\n          font-size: 1.15em;\n          color: white;\n          background-color:#47a66a;\n          display: grid;\n          align-items: center;\n          cursor: pointer;\n        }\n      `}</style>\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}